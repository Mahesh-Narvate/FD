/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import CostCalculation.AWS1;
import CostCalculation.DominantSet;
import CostCalculation.GCS1;
import CostCalculation.MicroAzur1;
import CostCalculation.Storageconverter;

import Database.QueryFunction;
import com.colloquial.arithcode.demo.PPMCompress;
import com.colloquial.arithcode.demo.PPMDecompress;
import ftp.FTPCheckFileExists;
import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JOptionPane;

import ftp.FTPDownloader;
import ftp.FTPListDemo;
import ftp.FTPListDemo_DG;
import ftp.FileStoragePath;
import static java.awt.Frame.MAXIMIZED_BOTH;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import javax.swing.JFileChooser;
import javax.swing.WindowConstants;
import org.apache.commons.net.ftp.FTPFile;
import progressbar88.PregressBarDemo88;
import socketprogrammingNN.NodeSender;
import socketprogrammingNN.StaticIpAddress;
import util.AscendingOrder;

/*
 *
 * @author user
 */
public class UserDashBord extends javax.swing.JFrame {

    QueryFunction q = new QueryFunction();
    public static File BrowseFile;
    public static String CompressedFileName;
    
    public static String msg;
    public static Long CompressedLength;
    public static Long WithoutCompressedLength;

    PPMCompress pc = new PPMCompress();
    PPMDecompress pd = new PPMDecompress();
    NodeSender ns = new NodeSender();
    public static HashMap<String, Long> GraphAlgo = new HashMap<>();
    public static HashMap<String, Double> sortedCloudlist = new HashMap<>();
    public static LinkedHashMap<String, Long> BanswidthListCloud = new LinkedHashMap<>();

    public static LinkedHashMap<String, String> CloudConnectionDetails = new LinkedHashMap<>();
    public static boolean click_to_upload;

    /**
     * Creates new form MainFrame
     */
    public UserDashBord() throws SQLException {
        this.setExtendedState(MAXIMIZED_BOTH);
        this.setLocationRelativeTo(null);
        initComponents();

        jpannelCompression.setVisible(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel2 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel8 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jtxtreqSs = new javax.swing.JTextField();
        jtxtreqGet = new javax.swing.JTextField();
        jtxtreqPut = new javax.swing.JTextField();
        jtxtreqReplicationReq = new javax.swing.JTextField();
        jtxtreqNoofReplication = new javax.swing.JTextField();
        jtxtReqDuration = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        txtinfoGet = new javax.swing.JTextField();
        txtinfoPut = new javax.swing.JTextField();
        txtinfoReplication = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        txtinfoName = new javax.swing.JTextField();
        jcomboinfoduration = new javax.swing.JComboBox<>();
        txtinfosize = new javax.swing.JComboBox<>();
        btnEditData = new javax.swing.JButton();
        jbtnUpdateData = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jPanel17 = new javax.swing.JPanel();
        jc1 = new javax.swing.JLabel();
        jc2 = new javax.swing.JLabel();
        jc3 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        CostCloud1 = new javax.swing.JTextField();
        CostCloud2 = new javax.swing.JTextField();
        CostCloud3 = new javax.swing.JTextField();
        GrandTotal = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        BrowseBtn = new javax.swing.JButton();
        BrowseText = new javax.swing.JTextField();
        jbtnwithcompress = new javax.swing.JButton();
        jbtnWithoutCompression = new javax.swing.JButton();
        jpannelCompression = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        lblCompressedSize = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jbtnUploadData = new javax.swing.JButton();
        jUploadFileName = new javax.swing.JTextField();
        jUploadActualSize = new javax.swing.JTextField();
        jUploadCompressedSize = new javax.swing.JTextField();
        jPanel12 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jComboDownloadFData = new javax.swing.JComboBox<>();
        jbtnDecompress = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jTabbedPane1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 255, 255), new java.awt.Color(153, 255, 255), new java.awt.Color(255, 204, 204), new java.awt.Color(255, 204, 204)));
        jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        jTabbedPane1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });

        jTabbedPane2.setBackground(new java.awt.Color(255, 255, 255));
        jTabbedPane2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTabbedPane2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane2StateChanged(evt);
            }
        });
        jTabbedPane2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane2MouseClicked(evt);
            }
        });

        jPanel8.setBackground(new java.awt.Color(255, 255, 255));
        jPanel8.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 255, 255), new java.awt.Color(153, 255, 255), new java.awt.Color(255, 204, 204), new java.awt.Color(255, 204, 204)));

        jPanel15.setBackground(new java.awt.Color(255, 255, 255));
        jPanel15.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(255, 255, 255), new java.awt.Color(255, 255, 255), new java.awt.Color(255, 204, 204), new java.awt.Color(255, 204, 204)));
        jPanel15.setLayout(new java.awt.GridBagLayout());

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("1) Duration");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 104;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(48, 46, 0, 0);
        jPanel15.add(jLabel2, gridBagConstraints);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("2) Storage Size");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 74;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(23, 46, 0, 0);
        jPanel15.add(jLabel3, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setText("3) Get");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 144;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 46, 0, 0);
        jPanel15.add(jLabel4, gridBagConstraints);

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setText("4) Put");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 145;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 46, 0, 0);
        jPanel15.add(jLabel5, gridBagConstraints);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("5) Replication Required");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.ipadx = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(17, 46, 0, 0);
        jPanel15.add(jLabel1, gridBagConstraints);

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setText("6) No of Replication");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 36;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 46, 47, 0);
        jPanel15.add(jLabel6, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 117;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(23, 72, 0, 50);
        jPanel15.add(jtxtreqSs, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 117;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 72, 0, 50);
        jPanel15.add(jtxtreqGet, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.ipadx = 117;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 72, 0, 50);
        jPanel15.add(jtxtreqPut, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 117;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(21, 72, 0, 50);
        jPanel15.add(jtxtreqReplicationReq, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.ipadx = 117;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 72, 0, 50);
        jPanel15.add(jtxtreqNoofReplication, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 117;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(52, 72, 0, 50);
        jPanel15.add(jtxtReqDuration, gridBagConstraints);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap(88, Short.MAX_VALUE)
                .addComponent(jPanel15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(71, 71, 71))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(jPanel15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(278, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Requirement", jPanel8);

        jPanel9.setBackground(new java.awt.Color(255, 255, 255));
        jPanel9.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 255, 255), new java.awt.Color(153, 255, 255), null, null));
        jPanel9.setLayout(new java.awt.GridBagLayout());

        jPanel16.setBackground(new java.awt.Color(255, 255, 255));
        jPanel16.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(255, 255, 255), new java.awt.Color(255, 255, 255), new java.awt.Color(255, 204, 204), new java.awt.Color(255, 204, 204)));
        jPanel16.setLayout(new java.awt.GridBagLayout());

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel8.setText("2) Duration");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.ipadx = 51;
        gridBagConstraints.ipady = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 35, 0, 0);
        jPanel16.add(jLabel8, gridBagConstraints);

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel9.setText("3) Size");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 87;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(16, 35, 0, 0);
        jPanel16.add(jLabel9, gridBagConstraints);

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel10.setText("4) Get");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 91;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(27, 35, 0, 0);
        jPanel16.add(jLabel10, gridBagConstraints);

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel11.setText("5) Put");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.ipadx = 92;
        gridBagConstraints.ipady = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 35, 0, 0);
        jPanel16.add(jLabel11, gridBagConstraints);

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel12.setText("6) Replication");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.ipadx = 33;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 35, 0, 0);
        jPanel16.add(jLabel12, gridBagConstraints);

        txtinfoGet.setPreferredSize(new java.awt.Dimension(54, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 149;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 48, 0, 14);
        jPanel16.add(txtinfoGet, gridBagConstraints);

        txtinfoPut.setPreferredSize(new java.awt.Dimension(54, 22));
        txtinfoPut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtinfoPutActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 149;
        gridBagConstraints.ipady = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 48, 0, 14);
        jPanel16.add(txtinfoPut, gridBagConstraints);

        txtinfoReplication.setPreferredSize(new java.awt.Dimension(54, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 149;
        gridBagConstraints.ipady = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 48, 12, 14);
        jPanel16.add(txtinfoReplication, gridBagConstraints);

        jLabel17.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel17.setText("1) Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipadx = 73;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(21, 35, 0, 0);
        jPanel16.add(jLabel17, gridBagConstraints);

        txtinfoName.setPreferredSize(new java.awt.Dimension(54, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 149;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 48, 0, 14);
        jPanel16.add(txtinfoName, gridBagConstraints);

        jcomboinfoduration.setFont(new java.awt.Font("Sylfaen", 0, 14)); // NOI18N
        jcomboinfoduration.setMinimumSize(new java.awt.Dimension(6, 20));
        jcomboinfoduration.setPreferredSize(new java.awt.Dimension(54, 22));
        jcomboinfoduration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcomboinfodurationActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 149;
        gridBagConstraints.ipady = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 48, 0, 0);
        jPanel16.add(jcomboinfoduration, gridBagConstraints);

        txtinfosize.setFont(new java.awt.Font("Serif", 0, 14)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 115;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 48, 0, 0);
        jPanel16.add(txtinfosize, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(45, 87, 0, 107);
        jPanel9.add(jPanel16, gridBagConstraints);

        btnEditData.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnEditData.setText("Get Data");
        btnEditData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditDataActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 75;
        gridBagConstraints.ipady = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 122, 257, 0);
        jPanel9.add(btnEditData, gridBagConstraints);

        jbtnUpdateData.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jbtnUpdateData.setText("Update Data");
        jbtnUpdateData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnUpdateDataActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 57;
        gridBagConstraints.ipady = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 38, 257, 0);
        jPanel9.add(jbtnUpdateData, gridBagConstraints);

        jTabbedPane2.addTab("Information", jPanel9);

        jPanel10.setBackground(new java.awt.Color(255, 255, 255));
        jPanel10.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 255, 255), new java.awt.Color(153, 255, 255), null, null));
        jPanel10.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel10.setLayout(new java.awt.GridBagLayout());

        jPanel17.setBackground(new java.awt.Color(255, 255, 255));
        jPanel17.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, null, new java.awt.Color(255, 204, 204), new java.awt.Color(255, 204, 204)));
        jPanel17.setLayout(new java.awt.GridBagLayout());

        jc1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jc1.setText("Cloud 1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 51;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(36, 24, 0, 0);
        jPanel17.add(jc1, gridBagConstraints);

        jc2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jc2.setText("Cloud 2");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 51;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(31, 24, 0, 0);
        jPanel17.add(jc2, gridBagConstraints);

        jc3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jc3.setText("Cloud 3");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 51;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(40, 24, 0, 0);
        jPanel17.add(jc3, gridBagConstraints);

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel15.setText("Grand Total");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.ipadx = 19;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(35, 24, 40, 0);
        jPanel17.add(jLabel15, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipadx = 131;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(36, 93, 0, 47);
        jPanel17.add(CostCloud1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipadx = 131;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(33, 93, 0, 47);
        jPanel17.add(CostCloud2, gridBagConstraints);

        CostCloud3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CostCloud3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipadx = 131;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(42, 93, 0, 47);
        jPanel17.add(CostCloud3, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipadx = 131;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(37, 93, 40, 47);
        jPanel17.add(GrandTotal, gridBagConstraints);

        jLabel16.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel16.setText("Total Cost");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 22;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(13, 134, 0, 0);
        jPanel17.add(jLabel16, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(49, 103, 308, 142);
        jPanel10.add(jPanel17, gridBagConstraints);

        jTabbedPane2.addTab("Cost", jPanel10);

        jPanel11.setBackground(new java.awt.Color(255, 255, 255));
        jPanel11.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 255, 255), new java.awt.Color(153, 255, 255), null, null));
        jPanel11.setLayout(new java.awt.GridBagLayout());

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, null, new java.awt.Color(255, 204, 204), new java.awt.Color(255, 204, 204)));
        jPanel3.setPreferredSize(new java.awt.Dimension(574, 286));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        BrowseBtn.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        BrowseBtn.setText("Browse");
        BrowseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BrowseBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(70, 42, 0, 0);
        jPanel3.add(BrowseBtn, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipadx = 343;
        gridBagConstraints.ipady = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(71, 58, 0, 36);
        jPanel3.add(BrowseText, gridBagConstraints);

        jbtnwithcompress.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jbtnwithcompress.setText("With Compression");
        jbtnwithcompress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnwithcompressActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 14;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(77, 73, 71, 0);
        jPanel3.add(jbtnwithcompress, gridBagConstraints);

        jbtnWithoutCompression.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jbtnWithoutCompression.setText("Without Compression");
        jbtnWithoutCompression.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnWithoutCompressionActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(77, 72, 71, 0);
        jPanel3.add(jbtnWithoutCompression, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 63);
        jPanel11.add(jPanel3, gridBagConstraints);

        jpannelCompression.setBackground(new java.awt.Color(255, 255, 255));
        jpannelCompression.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, null, new java.awt.Color(255, 204, 204), new java.awt.Color(255, 204, 204)));
        jpannelCompression.setLayout(new java.awt.GridBagLayout());

        jLabel18.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel18.setText("File Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 71;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(32, 52, 0, 0);
        jpannelCompression.add(jLabel18, gridBagConstraints);

        lblCompressedSize.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblCompressedSize.setText("Compressed Size");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(27, 52, 0, 0);
        jpannelCompression.add(lblCompressedSize, gridBagConstraints);

        jLabel20.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel20.setText("Actual Size");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 63;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(30, 52, 0, 0);
        jpannelCompression.add(jLabel20, gridBagConstraints);

        jbtnUploadData.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jbtnUploadData.setText("Upload");
        jbtnUploadData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnUploadDataActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.ipadx = 57;
        gridBagConstraints.ipady = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(37, 67, 31, 0);
        jpannelCompression.add(jbtnUploadData, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 221;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(32, 67, 0, 54);
        jpannelCompression.add(jUploadFileName, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 221;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(30, 67, 0, 54);
        jpannelCompression.add(jUploadActualSize, gridBagConstraints);

        jUploadCompressedSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jUploadCompressedSizeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 221;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(31, 67, 0, 54);
        jpannelCompression.add(jUploadCompressedSize, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = -4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(63, 12, 22, 0);
        jPanel11.add(jpannelCompression, gridBagConstraints);

        jTabbedPane2.addTab("Upload", jPanel11);

        jPanel12.setBackground(new java.awt.Color(255, 255, 255));
        jPanel12.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 255, 255), new java.awt.Color(153, 255, 255), null, null));
        jPanel12.setLayout(new java.awt.GridBagLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, null, new java.awt.Color(255, 204, 204), new java.awt.Color(255, 204, 204)));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jComboDownloadFData.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboDownloadFData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboDownloadFDataActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 137;
        gridBagConstraints.ipady = 16;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(59, 89, 0, 96);
        jPanel1.add(jComboDownloadFData, gridBagConstraints);

        jbtnDecompress.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jbtnDecompress.setText("Download Data");
        jbtnDecompress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnDecompressActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(59, 89, 105, 96);
        jPanel1.add(jbtnDecompress, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(84, 125, 269, 119);
        jPanel12.add(jPanel1, gridBagConstraints);

        jTabbedPane2.addTab("Download", jPanel12);

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 255, 255), new java.awt.Color(153, 255, 255), new java.awt.Color(255, 204, 204), new java.awt.Color(255, 204, 204)));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 648, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 661, Short.MAX_VALUE)
        );

        jTabbedPane2.addTab("Logout", jPanel4);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 657, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 5, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 694, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(60, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("DashBoard", jPanel5);

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 255, 255), new java.awt.Color(153, 255, 255), new java.awt.Color(255, 204, 204), new java.awt.Color(255, 204, 204)));
        jPanel6.setLayout(new java.awt.BorderLayout());
        jTabbedPane1.addTab("Home", jPanel6);

        jPanel2.add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jUploadCompressedSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jUploadCompressedSizeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jUploadCompressedSizeActionPerformed

    private void jbtnwithcompressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnwithcompressActionPerformed

        click_to_upload = true;

        jUploadCompressedSize.setVisible(true);
        lblCompressedSize.setVisible(true);
        jpannelCompression.setVisible(true);

        try {

            jUploadFileName.setText(BrowseFile.getName());
            jUploadActualSize.setText(BrowseFile.length() + "");
            WithoutCompressedLength = BrowseFile.length();
            GraphAlgo.put("WithoutPPm", WithoutCompressedLength);
            // file data to compress
            pc.getFile(BrowseFile);
//            this.wait(10000);
            File f = new File(System.getProperty("user.dir") + File.separator + "CompressedFileByPPm" + File.separator + pc.convertFname(BrowseFile.getName()));
            CompressedFileName = f.getAbsolutePath();

            System.out.println(" compressed File path " + f.getAbsolutePath() + " length=" + f.length());

            long ComFileLenfth = f.length();
            CompressedLength = f.length();
            System.out.println("ComFileLenfth :: " + ComFileLenfth);
            jUploadCompressedSize.setText(ComFileLenfth + "");
            GraphAlgo.put("WithPPm", CompressedLength);

        } catch (IOException ex) {
            Logger.getLogger(UserDashBord.class.getName()).log(Level.SEVERE, null, ex);

        }

    }//GEN-LAST:event_jbtnwithcompressActionPerformed

    private void CostCloud3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CostCloud3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CostCloud3ActionPerformed

    private void jComboDownloadFDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboDownloadFDataActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboDownloadFDataActionPerformed

    private void jbtnDecompressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnDecompressActionPerformed
        try {
            // TODO add your handling code here:
            String Cloud_name = q.getFileUploaded_Cloud_Name(UserLogin.email, (String) jComboDownloadFData.getSelectedItem());
            FTPDownloader ftpDownloader;
            if (Cloud_name.equals("aws")) {
                try {
                    ftpDownloader = new FTPDownloader(AWS1.Hostid, AWS1.Username, AWS1.Password);
                    File DownloadDir = new File(System.getProperty("user.dir") + File.separator + "Download File");
                    if (!DownloadDir.exists()) {
                        DownloadDir.mkdir();
                    }
                    ftpDownloader.downloadFile(FileStoragePath.getCloudStoragePath() + (String) jComboDownloadFData.getSelectedItem(), DownloadDir + File.separator + (String) jComboDownloadFData.getSelectedItem());
                    ftpDownloader.disconnect();
                    String fname = (String) jComboDownloadFData.getSelectedItem();
                    if (fname.contains(".ppm")) {
                        pd.getFile(new File(DownloadDir + File.separator + (String) jComboDownloadFData.getSelectedItem()));
                    }

                    JOptionPane.showMessageDialog(null, "File Downloaded  Sucessfully.....!");
                } catch (Exception ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
            if (Cloud_name.equals("azur")) {

                try {
                    ftpDownloader = new FTPDownloader(MicroAzur1.Hostid, MicroAzur1.Username, MicroAzur1.Password);
                    File DownloadDir = new File(System.getProperty("user.dir") + File.separator + "Download File");
                    if (!DownloadDir.exists()) {
                        DownloadDir.mkdir();
                    }
                    ftpDownloader.downloadFile(FileStoragePath.getCloudStoragePath() + (String) jComboDownloadFData.getSelectedItem(), DownloadDir + File.separator + (String) jComboDownloadFData.getSelectedItem());
                    ftpDownloader.disconnect();
                    String fname = (String) jComboDownloadFData.getSelectedItem();
                    if (fname.contains(".ppm")) {
                        pd.getFile(new File(DownloadDir + File.separator + (String) jComboDownloadFData.getSelectedItem()));
                    }

                    JOptionPane.showMessageDialog(null, "File Downloaded  Sucessfully.....!");
                } catch (Exception ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
            if (Cloud_name.equals("gcs")) {
                try {
                    ftpDownloader = new FTPDownloader(GCS1.Hostid, GCS1.Username, GCS1.Password);
                    File DownloadDir = new File(System.getProperty("user.dir") + File.separator + "Download File");
                    if (!DownloadDir.exists()) {
                        DownloadDir.mkdir();
                    }
                    ftpDownloader.downloadFile(FileStoragePath.getCloudStoragePath() + (String) jComboDownloadFData.getSelectedItem(), DownloadDir + File.separator + (String) jComboDownloadFData.getSelectedItem());
                    ftpDownloader.disconnect();
                    String fname = (String) jComboDownloadFData.getSelectedItem();
                    if (fname.contains(".ppm")) {
                        pd.getFile(new File(DownloadDir + File.separator + (String) jComboDownloadFData.getSelectedItem()));
                    }

                    JOptionPane.showMessageDialog(null, "File Downloaded  Sucessfully.....!");
                } catch (Exception ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        } catch (Exception ex) {
            Logger.getLogger(UserDashBord.class.getName()).log(Level.SEVERE, null, ex);
        }

//        String dirPath = "/var/www/www-root/data/tarun/Download/";
//        String filePath = "/var/www/www-root/data/tarun/Download/" + (String) jComboDownloadFData.getSelectedItem();
//        boolean exist = false;
//        FTPCheckFileExists ftpApp = new FTPCheckFileExists();
//        FTPDownloader ftpDownloader;
//        for (int i = 0; i < CloudConnectionDetails.size(); i++) {
//            try {
//                String Key = (String) CloudConnectionDetails.keySet().toArray()[i];
//                String valueForKey = CloudConnectionDetails.get(Key);
//                System.out.println("key ::::: " + Key + " value ::: " + valueForKey);
//                String[] splitdata = valueForKey.split(",");
//                ftpApp.connect(splitdata[0], 21, splitdata[1], splitdata[2]);
//
//                if (ftpApp.checkDirectoryExists(dirPath)) {
//                    System.out.println("Is directory " + dirPath + " exists? " + ftpApp.checkDirectoryExists(dirPath));
//                    exist = ftpApp.checkFileExists(filePath);
//                    if (exist) {
//                        try {
//                            ftpDownloader = new FTPDownloader(splitdata[0], splitdata[1], splitdata[2]);
//
////                            ftpDownloader = new FTPDownloader(StaticIpAddress.GCSAddres, StaticIpAddress.GCSID, StaticIpAddress.GCSPassword);
//                            File DownloadDir = new File(System.getProperty("user.dir") + File.separator + "Download File");
//                            if (!DownloadDir.exists()) {
//                                DownloadDir.mkdir();
//                            }
//                            ftpDownloader.downloadFile("/var/www/www-root/data/tarun/Download/" + (String) jComboDownloadFData.getSelectedItem(), DownloadDir + File.separator + (String) jComboDownloadFData.getSelectedItem());
//                            ftpDownloader.disconnect();
////                            ftpDownloader.downloadFile("/var/www/www-root/data/tarun/Download/" + (String) jComboDownloadFData.getSelectedItem(), BrowseHtmlFile + File.separator + (String) jComboDownloadFData.getSelectedItem());
////                            ftpDownloader.disconnect();
//                            String fname = (String) jComboDownloadFData.getSelectedItem();
//                            if (fname.contains(".ppm")) {
//                                pd.getFile(new File(DownloadDir + File.separator + (String) jComboDownloadFData.getSelectedItem()));
//                            }
//
//                            JOptionPane.showMessageDialog(null, "File Downloaded  Sucessfully.....!");
//                        } catch (Exception ex) {
//                            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
//                        }
//                        break;
//                    }
//                }
//                System.out.println("Is file " + filePath + " exists? " + exist);
//
//            } catch (Exception e) {
//                e.printStackTrace();
//            } finally {
//                try {
//                    ftpApp.logout();
//                } catch (IOException ex) {
//                    ex.printStackTrace();
//                }
//            }
//
//        }
//

    }//GEN-LAST:event_jbtnDecompressActionPerformed

    private void jTabbedPane2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane2MouseClicked

    }//GEN-LAST:event_jTabbedPane2MouseClicked

    private void btnEditDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditDataActionPerformed

        txtinfoName.setEnabled(true);
        jcomboinfoduration.setEnabled(true);
        txtinfosize.setEnabled(true);
        txtinfoGet.setEnabled(true);
        txtinfoPut.setEnabled(true);
        txtinfoReplication.setEnabled(true);

    }//GEN-LAST:event_btnEditDataActionPerformed

    private void BrowseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrowseBtnActionPerformed
        // TODO add your handling code here:
        try {
            JFileChooser chooser = new JFileChooser(System.getProperty("user.dir"));
            chooser.showOpenDialog(null);
            BrowseFile = chooser.getSelectedFile();
            String filename = BrowseFile.getAbsolutePath();
            BrowseText.setText(filename);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Please select file to upload..");
        }
    }//GEN-LAST:event_BrowseBtnActionPerformed

    private void jcomboinfodurationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcomboinfodurationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcomboinfodurationActionPerformed

    private void jbtnUploadDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnUploadDataActionPerformed

        JOptionPane.showMessageDialog(null, "Please wait Preparing to upload....");
        CloudConnectionDetails = ns.getCloudConnectionInfo(sortedCloudlist);
        System.out.println(" in  CloudConnectionDetails ....!");

        for (int i = 0; i < CloudConnectionDetails.size(); i++) {
            String Key = (String) CloudConnectionDetails.keySet().toArray()[i];
            String valueForKey = CloudConnectionDetails.get(Key);
            System.out.println(" CloudConnectionDetails key:: " + Key + " value for CloudConnectionDetails  :: " + valueForKey);
        }
        System.out.println(" in  BanswidthListCloud ....!");
       BanswidthListCloud = ns.getBandwidth(CloudConnectionDetails);
        for (int i = 0; i < BanswidthListCloud.size(); i++) {

            String Key = (String) BanswidthListCloud.keySet().toArray()[i];
            long valueForKey = BanswidthListCloud.get(Key);
            System.out.println("BanswidthListCloud key:: " + Key + " value for BanswidthListCloud key :: " + valueForKey);
        }
        if (click_to_upload) {
            try {

                // code to upload data send dataa method takes two argument  1)dominant factor and 2)no of replica
                String[] DomNoR = q.getDominant(UserLogin.email).split(",");

                ns.uploadData(CloudConnectionDetails, BanswidthListCloud, pc.convertFname(BrowseFile.getName()), Integer.parseInt(DomNoR[1]));

            } catch (SQLException ex) {
                Logger.getLogger(UserDashBord.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(UserDashBord.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            try {
                // code to upload data send dataa method takes two argument  1)dominant factor and 2)no of replica
                String[] DomNoR = q.getDominant(UserLogin.email).split(",");
                CloudConnectionDetails = ns.getCloudConnectionInfo(sortedCloudlist);
//                for (int i = 0; i < CloudConnectionDetails.size(); i++) {
//                    String Key = (String) CloudConnectionDetails.keySet().toArray()[i];
//                    String valueForKey = CloudConnectionDetails.get(Key);
//                    System.out.println("key:: " + Key + " value :: " + valueForKey);
//                }
                ns.uploadData(CloudConnectionDetails, BanswidthListCloud, BrowseFile.getName(), Integer.parseInt(DomNoR[1]));
            } catch (SQLException ex) {
                Logger.getLogger(UserDashBord.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(UserDashBord.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jbtnUploadDataActionPerformed

    private void jbtnUpdateDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnUpdateDataActionPerformed
        try {
            // TODO add your handling code here:

            /// call query function for updateuser Details
            q.updateRegisteredData((String) jcomboinfoduration.getSelectedItem(), (String) txtinfosize.getSelectedItem(), txtinfoGet.getText(), txtinfoPut.getText(), txtinfoReplication.getText(), UserLogin.email);
        } catch (SQLException ex) {
            Logger.getLogger(UserDashBord.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jbtnUpdateDataActionPerformed

    private void jTabbedPane2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane2StateChanged
        // TODO add your handling code here:
        int i = jTabbedPane2.getSelectedIndex();
        System.out.println("i=" + i);
        if (i == 0) {
            setDisableField();
        }

        if (i == 2) {
            costCalculations();
        }

        if (i == 4) {
            JOptionPane.showMessageDialog(null, "please wait calculating time to finish current process...!");
            setDownloadedItem();
        }
        if (i == 5) {
            UserLogin.email = "";
            this.dispose();
            new MainFrame().setVisible(true);
        }
    }//GEN-LAST:event_jTabbedPane2StateChanged

    private void txtinfoPutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtinfoPutActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtinfoPutActionPerformed

    private void jbtnWithoutCompressionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnWithoutCompressionActionPerformed
        // TODO add your handling code here:
        click_to_upload = false;
        try {
            lblCompressedSize.setVisible(false);
            jUploadCompressedSize.setVisible(false);
            jpannelCompression.setVisible(true);
            jUploadFileName.setText(BrowseFile.getName());
            jUploadActualSize.setText(BrowseFile.length() + "");

            System.out.println(" compressed File path " + BrowseFile.getAbsolutePath() + " length=" + BrowseFile.length());

            WithoutCompressedLength = BrowseFile.length();

        } catch (Exception ex) {
            Logger.getLogger(UserDashBord.class.getName()).log(Level.SEVERE, null, ex);

        }
    }//GEN-LAST:event_jbtnWithoutCompressionActionPerformed

    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged
        // TODO add your handling code here:
//        int i = jTabbedPane1.getSelectedIndex();
//        System.out.println("i=" + i);
//        if (i == 0) {
//            getBandwidth();
//        }

    }//GEN-LAST:event_jTabbedPane1StateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserDashBord.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserDashBord.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserDashBord.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserDashBord.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    new UserDashBord().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(UserDashBord.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    public void setDisableField() {
        try {
            txtinfoName.setText("");
            ArrayList<String> RegData = q.getRegisteredData(UserLogin.email);
            jtxtReqDuration.setText(RegData.get(0));
            jtxtreqSs.setText(RegData.get(1));
            jtxtreqGet.setText(RegData.get(2));
            jtxtreqPut.setText(RegData.get(3));
            jtxtreqReplicationReq.setText(RegData.get(4));
            jtxtreqNoofReplication.setText(RegData.get(5));

            txtinfoName.setText(UserLogin.email);

            ArrayList<String> comboData = new ArrayList<>();
            comboData.add("15days");
            comboData.add("1Month");
            comboData.add("1Year");
            comboData.add("2Year");
            comboData.remove(RegData.get(0));
            comboData.add(0, RegData.get(0));

            String[] arr1 = comboData.toArray(new String[0]);
            for (int i = 0; i < arr1.length; i++) {
                arr1[i] = (String) comboData.get(i);
            }

            ArrayList<String> comboSize = new ArrayList<>();
            comboSize.add("1MB");
            comboSize.add("2MB");
            comboSize.add("5MB");
            comboSize.add("10MB");
            comboSize.add("100MB");
            comboSize.add("1GB");
            comboSize.add("2GB");
            comboSize.add("5GB");
            comboSize.add("10GB");
            comboSize.add("50GB");
            comboSize.add("1TB");
            comboSize.remove(RegData.get(1));
            comboSize.add(0, RegData.get(1));
            String[] StorageSizeData = comboSize.toArray(new String[0]);
            for (int i = 0; i < StorageSizeData.length; i++) {
                StorageSizeData[i] = (String) comboSize.get(i);
            }

            jcomboinfoduration.setModel(new javax.swing.DefaultComboBoxModel(arr1));
            txtinfosize.setModel(new javax.swing.DefaultComboBoxModel(StorageSizeData));
            txtinfoGet.setText(RegData.get(2));
            txtinfoPut.setText(RegData.get(3));
            txtinfoReplication.setText(RegData.get(5));

            jtxtReqDuration.disable();
            jtxtreqSs.disable();
            jtxtreqGet.disable();
            jtxtreqPut.disable();
            jtxtreqReplicationReq.disable();
            jtxtreqNoofReplication.disable();

            txtinfoName.disable();
            jcomboinfoduration.disable();
            txtinfosize.disable();
            txtinfoGet.disable();
            txtinfoPut.disable();
            txtinfoReplication.disable();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, " please run whole project..");
            Logger.getLogger(UserDashBord.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void setDownloadedItem() {

        long Stime = System.currentTimeMillis();
        System.out.println("in setDownload File list Method");

//        String firstKey = (String) sortedCloudlist.keySet().toArray()[0];
//        System.out.println("firstKey=" + firstKey);
//
//        FTPFile[] files1 = null;
//        if (firstKey.contains("aws")) {
//            files1 = FTPListDemo.GetListFilesFromServer(AWS1.Hostid, AWS1.Username, AWS1.Password);
//        }
//        if (firstKey.contains("azur")) {
//             files1=  FTPListDemo.GetListFilesFromServer(MicroAzur1.Hostid  , MicroAzur1.Username, MicroAzur1.Password);
//           // files1 = FTPListDemo.GetListFilesFromServer(AWS1.Hostid, AWS1.Username, AWS1.Password);
//
//        }
//        if (firstKey.contains("gcs")) {
//            files1 = FTPListDemo_DG.GetListFilesFromServer(GCS1.Hostid, GCS1.Username, GCS1.Password);
//            // files1 = FTPListDemo.GetListFilesFromServer(GCS1.Hostid, GCS1.Username, GCS1.Password);
//
//        }
//
//        Object[] arr1;
//        ArrayList<String> flist = new ArrayList<>();
//        if (files1 != null) {
//            System.out.println("lenfth :: " + files1.length);
//            for (FTPFile files11 : files1) {
//                System.out.println("files1[i].getName():: " + files11.getName());
//                if (files11.getName().equals(".")) {
//                } else if (files11.getName().equals("..")) {
//                } else if (files11.getName().equals(" ")) {
//                } else {
//                    flist.add(files11.getName());
//                }
//            }
//        }
//
//        arr1 = flist.toArray();
//        System.out.println("");
//        long Etime = System.currentTimeMillis();
//        PregressBarDemo88 pb = new PregressBarDemo88(Etime - Stime, "getting list of files from cloud..");
//        pb.setVisible(true);
//        try {
//            this.wait(100);
//            pb.dispose();
//        } catch (Exception ex) {
//            // Logger.getLogger(UserDashBord.class.getName()).log(Level.SEVERE, null, ex);
//        }
        try {
            ArrayList<String> flist = q.getUploadedFileList(UserLogin.email);
            Object[] arr1;
            arr1 = flist.toArray();
            jComboDownloadFData.setModel(new javax.swing.DefaultComboBoxModel(arr1));
        } catch (SQLException ex) {
            Logger.getLogger(UserDashBord.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void costCalculations() {
        try {

            // TODO add your handling code here:
            System.out.println("here in cost clculation....");
            double Storagesize = Storageconverter.getConvertedStorage((String) txtinfosize.getSelectedItem());
            double getRequest = Storageconverter.getConverterGet(txtinfoGet.getText().trim());
            double putRequest = Storageconverter.getConverterPut(txtinfoPut.getText().trim());

            System.out.println("Storagesize :: " + Storagesize + "Put req=" + putRequest + "Get Req=" + getRequest);

            //  DominantSet ds = new DominantSet(Storagesize, getRequest, putRequest);
            DominantSet ds = new DominantSet((String) txtinfosize.getSelectedItem(), txtinfoGet.getText().trim(), txtinfoPut.getText().trim());
            ds.addelement();
            ds.sort();
            //     ds.DomiBalset(Storagesize, getRequest, putRequest);
            ds.DomiBalset();

            sortedCloudlist = AscendingOrder.sortHashMapByValue(DominantSet.TotalCostOFclouds);
            String firstKey = (String) sortedCloudlist.keySet().toArray()[0];
            Double valueForFirstKey = sortedCloudlist.get(firstKey);
            System.out.println("Key ::: " + firstKey + "  value ::: " + valueForFirstKey);

            String SecondKey = (String) sortedCloudlist.keySet().toArray()[1];
            Double valueForSecondKey = sortedCloudlist.get(SecondKey);
            System.out.println("Key ::: " + SecondKey + "  value ::: " + valueForSecondKey);

            String ThirdKey = (String) sortedCloudlist.keySet().toArray()[2];
            Double valueForThirdKey = sortedCloudlist.get(ThirdKey);
            System.out.println("Key ::: " + ThirdKey + "  value ::: " + valueForThirdKey);

            System.out.println("q.getNoOfReplication(mail)=" + q.getNoOfReplication(UserLogin.email) + " mail=" + UserLogin.email);
            double Grandtotal = 0.0;
            if (q.getNoOfReplication(UserLogin.email) == 3) {
                jc1.setVisible(true);
                CostCloud1.setVisible(true);
                jc2.setVisible(true);
                CostCloud2.setVisible(true);
                jc3.setVisible(true);
                CostCloud3.setVisible(true);

                jc1.setText(firstKey + "");
                CostCloud1.setText(String.format("%.4f", valueForFirstKey) + " $");

                jc2.setText(SecondKey + "");
                CostCloud2.setText(String.format("%.4f", valueForSecondKey) + " $");

                jc3.setText(ThirdKey + "");
                CostCloud3.setText(String.format("%.4f", valueForThirdKey) + " $");

                Grandtotal = valueForFirstKey + valueForSecondKey + valueForThirdKey;
                GrandTotal.setText(String.format("%.4f", Grandtotal) + " $");
         } else if (2 == q.getNoOfReplication(UserLogin.email)) {

                jc3.setVisible(false);
                CostCloud3.setVisible(false);

                jc2.setVisible(true);
                CostCloud2.setVisible(true);

                jc1.setText(firstKey + "");
                CostCloud1.setText(String.format("%.4f", valueForFirstKey) + " $");

                jc2.setText(SecondKey + "");
                CostCloud2.setText(String.format("%.4f", valueForSecondKey) + " $");

                Grandtotal = valueForFirstKey + valueForSecondKey;
                GrandTotal.setText(String.format("%.4f", Grandtotal) + " $");

            } else {
                jc1.setVisible(true);
                CostCloud1.setVisible(true);
                jc2.setVisible(false);
                CostCloud2.setVisible(false);
                jc3.setVisible(false);
                CostCloud3.setVisible(false);

                jc1.setText(firstKey + "");
                CostCloud1.setText(String.format("%.4f", valueForFirstKey) + " $");
                Grandtotal = valueForFirstKey;
                GrandTotal.setText(String.format("%.4f", Grandtotal) + " $");

            }

        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BrowseBtn;
    private javax.swing.JTextField BrowseText;
    private javax.swing.JTextField CostCloud1;
    private javax.swing.JTextField CostCloud2;
    private javax.swing.JTextField CostCloud3;
    private javax.swing.JTextField GrandTotal;
    private javax.swing.JButton btnEditData;
    private javax.swing.JComboBox<String> jComboDownloadFData;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTextField jUploadActualSize;
    private javax.swing.JTextField jUploadCompressedSize;
    private javax.swing.JTextField jUploadFileName;
    private javax.swing.JButton jbtnDecompress;
    private javax.swing.JButton jbtnUpdateData;
    private javax.swing.JButton jbtnUploadData;
    private javax.swing.JButton jbtnWithoutCompression;
    private javax.swing.JButton jbtnwithcompress;
    private javax.swing.JLabel jc1;
    private javax.swing.JLabel jc2;
    private javax.swing.JLabel jc3;
    private javax.swing.JComboBox<String> jcomboinfoduration;
    private javax.swing.JPanel jpannelCompression;
    public javax.swing.JTextField jtxtReqDuration;
    private javax.swing.JTextField jtxtreqGet;
    private javax.swing.JTextField jtxtreqNoofReplication;
    private javax.swing.JTextField jtxtreqPut;
    private javax.swing.JTextField jtxtreqReplicationReq;
    private javax.swing.JTextField jtxtreqSs;
    private javax.swing.JLabel lblCompressedSize;
    private javax.swing.JTextField txtinfoGet;
    private javax.swing.JTextField txtinfoName;
    private javax.swing.JTextField txtinfoPut;
    private javax.swing.JTextField txtinfoReplication;
    private javax.swing.JComboBox<String> txtinfosize;
    // End of variables declaration//GEN-END:variables
}
