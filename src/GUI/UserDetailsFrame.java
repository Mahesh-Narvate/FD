/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Database.DBConnection;
import Database.QueryFunction;
import Table.TableCreater;
import Table.table;
import date.BillingPeriod;
import date.DateCalc;
import java.awt.Dimension;
import static java.awt.Frame.MAXIMIZED_BOTH;
import java.awt.Toolkit;
import java.io.File;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author rishi
 */
public class UserDetailsFrame extends javax.swing.JFrame {

    DBConnection conobj = new DBConnection();
    Connection con = null;
    PreparedStatement ps;
    ResultSet rs;
    QueryFunction qf = new QueryFunction();
    DateCalc dc = new DateCalc();
    public final String ALL_USER = "All User";//

    /**
     * Creates new form UserDetailsFrame
     */
    public UserDetailsFrame() {
        try {
            Dimension scrSize = Toolkit.getDefaultToolkit().getScreenSize();
            this.setLocation(scrSize.width / 2 - this.getSize().width / 2, scrSize.height / 2 - this.getSize().height / 2);
            setExtendedState(MAXIMIZED_BOTH);

            initComponents();
            ArrayList<String> aa1 = qf.getUserIdDetails();
            jComboBoxUserDetailsFrame.addItem(ALL_USER);
            for (int i = 0; i < aa1.size(); i++) {

                jComboBoxUserDetailsFrame.addItem(aa1.get(i));

            }
        } catch (SQLException ex) {
            Logger.getLogger(UserDetailsFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jbtnviewuserdetails = new javax.swing.JButton();
        jbtnAws = new javax.swing.JButton();
        jbtnAzur = new javax.swing.JButton();
        jbtnGcs = new javax.swing.JButton();
        jbtnlogout = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtableviewuserdetails = new javax.swing.JTable();
        jComboBoxUserDetailsFrame = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(34, 49, 63));

        jbtnviewuserdetails.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jbtnviewuserdetails.setText("View User details");
        jbtnviewuserdetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnviewuserdetailsActionPerformed(evt);
            }
        });

        jbtnAws.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jbtnAws.setText("AWS");
        jbtnAws.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnAwsActionPerformed(evt);
            }
        });

        jbtnAzur.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jbtnAzur.setText("AZUR");
        jbtnAzur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnAzurActionPerformed(evt);
            }
        });

        jbtnGcs.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jbtnGcs.setText("GCS");
        jbtnGcs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnGcsActionPerformed(evt);
            }
        });

        jbtnlogout.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jbtnlogout.setText("Logout");
        jbtnlogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnlogoutActionPerformed(evt);
            }
        });

        jtableviewuserdetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jtableviewuserdetails);

        jScrollPane2.setViewportView(jScrollPane1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jComboBoxUserDetailsFrame, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(jbtnviewuserdetails, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addComponent(jbtnAws)
                .addGap(63, 63, 63)
                .addComponent(jbtnAzur)
                .addGap(63, 63, 63)
                .addComponent(jbtnGcs, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(62, 62, 62)
                .addComponent(jbtnlogout, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1050, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBoxUserDetailsFrame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtnviewuserdetails)
                    .addComponent(jbtnAws)
                    .addComponent(jbtnAzur)
                    .addComponent(jbtnGcs)
                    .addComponent(jbtnlogout))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 77, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 564, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jPanel2.setLayout(new java.awt.BorderLayout());
        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtnviewuserdetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnviewuserdetailsActionPerformed
        // TODO add your handling code here: 
        if ((ALL_USER.equals((String) jComboBoxUserDetailsFrame.getSelectedItem()))) {
            try {
                ArrayList<String> aa1 = qf.getFinalPoolStoredUDetails();
                String read = new table().getViewUserDeatilsData(aa1);
                jtableviewuserdetails.removeAll();
                jtableviewuserdetails.setModel(new TableCreater().GetTableModel(read));
                jtableviewuserdetails.updateUI();
                TableColumn column = null;
                for (int i = 0; i < jtableviewuserdetails.getColumnCount(); i++) {
                    column = jtableviewuserdetails.getColumnModel().getColumn(i);
                    if (i == 0) {
                        column.setPreferredWidth(3000);
                    } else if (i == 1 || i == 2) {
                        column.setPreferredWidth(3000);
                    } else if (i == 3 || i == 4) {
                        column.setPreferredWidth(3000);
                    } else if (i == 5 || i == 6) {
                        column.setPreferredWidth(3000);
                    } else if (i == 7 || i == 8) {
                        column.setPreferredWidth(3000);

                    } else if (i == 9 || i == 10) {
                        column.setPreferredWidth(3000);

                    } else if (i == 11 || i == 12) {
                        column.setPreferredWidth(3000);

                    } else if (i == 13 || i == 114) {
                        column.setPreferredWidth(3000);
                    }
                }

            } catch (SQLException ex) {
                Logger.getLogger(Register.class.getName()).log(Level.SEVERE, null, ex);

            }
        } else {
            try {
                ArrayList<String> aa1 = qf.getFinalPoolStoredUDetails((String) jComboBoxUserDetailsFrame.getSelectedItem());
                String read = new table().getViewUserDeatilsData(aa1);
                jtableviewuserdetails.removeAll();
                jtableviewuserdetails.setModel(new TableCreater().GetTableModel(read));
                jtableviewuserdetails.updateUI();
                TableColumn column = null;
                for (int i = 0; i < jtableviewuserdetails.getColumnCount(); i++) {
                    column = jtableviewuserdetails.getColumnModel().getColumn(i);
                    if (i == 0) {
                        column.setPreferredWidth(3000);
                    } else if (i == 1 || i == 2) {
                        column.setPreferredWidth(3000);
                    } else if (i == 3 || i == 4) {
                        column.setPreferredWidth(3000);
                    } else if (i == 5 || i == 6) {
                        column.setPreferredWidth(3000);
                    } else if (i == 7 || i == 8) {
                        column.setPreferredWidth(3000);

                    } else if (i == 9 || i == 10) {
                        column.setPreferredWidth(3000);

                    } else if (i == 11 || i == 12) {
                        column.setPreferredWidth(3000);

                    } else if (i == 13 || i == 114) {
                        column.setPreferredWidth(3000);
                    }
                }

            } catch (SQLException ex) {
                Logger.getLogger(Register.class.getName()).log(Level.SEVERE, null, ex);

            }

        }


    }//GEN-LAST:event_jbtnviewuserdetailsActionPerformed

    private void jbtnAwsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnAwsActionPerformed
        // TODO add your handling code here:

        if ((ALL_USER.equals(jComboBoxUserDetailsFrame.getSelectedItem()))) {

            try {
                ArrayList<String> aa1 = qf.getUploadedDataToAWS();
                String read = new table().getViewUserDeatilsData(aa1);
                jtableviewuserdetails.removeAll();
                jtableviewuserdetails.setModel(new TableCreater().GetTableModel(read));
                jtableviewuserdetails.updateUI();
                TableColumn column = null;
                for (int i = 0; i < jtableviewuserdetails.getColumnCount(); i++) {
                    column = jtableviewuserdetails.getColumnModel().getColumn(i);
                    if (i == 0) {
                        column.setPreferredWidth(3000);
                    } else if (i == 1 || i == 2) {
                        column.setPreferredWidth(3000);
                    } else if (i == 3 || i == 4) {
                        column.setPreferredWidth(3000);
                    } else if (i == 5 || i == 6) {
                        column.setPreferredWidth(3000);
                    } else if (i == 7 || i == 8) {
                        column.setPreferredWidth(3000);

                    } else if (i == 9 || i == 10) {
                        column.setPreferredWidth(3000);

                    } else if (i == 11 || i == 12) {
                        column.setPreferredWidth(3000);

                    } else if (i == 13 || i == 114) {
                        column.setPreferredWidth(3000);
                    }
                }

            } catch (SQLException ex) {
                Logger.getLogger(Register.class.getName()).log(Level.SEVERE, null, ex);

            }
        } else {

            try {
                ArrayList<String> aa1 = qf.getUploadedDataToAWS((String) jComboBoxUserDetailsFrame.getSelectedItem());
                String read = new table().getViewUserDeatilsData(aa1);
                jtableviewuserdetails.removeAll();
                jtableviewuserdetails.setModel(new TableCreater().GetTableModel(read));
                jtableviewuserdetails.updateUI();
                TableColumn column = null;
                for (int i = 0; i < jtableviewuserdetails.getColumnCount(); i++) {
                    column = jtableviewuserdetails.getColumnModel().getColumn(i);
                    if (i == 0) {
                        column.setPreferredWidth(3000);
                    } else if (i == 1 || i == 2) {
                        column.setPreferredWidth(3000);
                    } else if (i == 3 || i == 4) {
                        column.setPreferredWidth(3000);
                    } else if (i == 5 || i == 6) {
                        column.setPreferredWidth(3000);
                    } else if (i == 7 || i == 8) {
                        column.setPreferredWidth(3000);

                    } else if (i == 9 || i == 10) {
                        column.setPreferredWidth(3000);

                    } else if (i == 11 || i == 12) {
                        column.setPreferredWidth(3000);

                    } else if (i == 13 || i == 114) {
                        column.setPreferredWidth(3000);
                    }
                }

            } catch (SQLException ex) {
                Logger.getLogger(Register.class.getName()).log(Level.SEVERE, null, ex);

            }
        }
    }//GEN-LAST:event_jbtnAwsActionPerformed

    private void jbtnlogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnlogoutActionPerformed
        // TODO add your handling code here:
        this.dispose();
        new MainFrame().setVisible(true);
    }//GEN-LAST:event_jbtnlogoutActionPerformed

    private void jbtnAzurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnAzurActionPerformed
        // TODO add your handling code here:
        if ((ALL_USER.equals(jComboBoxUserDetailsFrame.getSelectedItem()))) {
            try {
                ArrayList<String> aa1 = qf.getUploadedDataToAzur();
                String read = new table().getViewUserDeatilsData(aa1);
                jtableviewuserdetails.removeAll();
                jtableviewuserdetails.setModel(new TableCreater().GetTableModel(read));
                jtableviewuserdetails.updateUI();
                TableColumn column = null;
                for (int i = 0; i < jtableviewuserdetails.getColumnCount(); i++) {
                    column = jtableviewuserdetails.getColumnModel().getColumn(i);
                    if (i == 0) {
                        column.setPreferredWidth(3000);
                    } else if (i == 1 || i == 2) {
                        column.setPreferredWidth(3000);
                    } else if (i == 3 || i == 4) {
                        column.setPreferredWidth(3000);
                    } else if (i == 5 || i == 6) {
                        column.setPreferredWidth(3000);
                    } else if (i == 7 || i == 8) {
                        column.setPreferredWidth(3000);

                    } else if (i == 9 || i == 10) {
                        column.setPreferredWidth(3000);

                    } else if (i == 11 || i == 12) {
                        column.setPreferredWidth(3000);

                    } else if (i == 13 || i == 114) {
                        column.setPreferredWidth(3000);
                    }
                }

            } catch (SQLException ex) {
                Logger.getLogger(Register.class.getName()).log(Level.SEVERE, null, ex);

            }
        } else {
            try {
                ArrayList<String> aa1 = qf.getUploadedDataToAZUR((String) jComboBoxUserDetailsFrame.getSelectedItem());
                String read = new table().getViewUserDeatilsData(aa1);
                jtableviewuserdetails.removeAll();
                jtableviewuserdetails.setModel(new TableCreater().GetTableModel(read));
                jtableviewuserdetails.updateUI();
                TableColumn column = null;
                for (int i = 0; i < jtableviewuserdetails.getColumnCount(); i++) {
                    column = jtableviewuserdetails.getColumnModel().getColumn(i);
                    if (i == 0) {
                        column.setPreferredWidth(3000);
                    } else if (i == 1 || i == 2) {
                        column.setPreferredWidth(3000);
                    } else if (i == 3 || i == 4) {
                        column.setPreferredWidth(3000);
                    } else if (i == 5 || i == 6) {
                        column.setPreferredWidth(3000);
                    } else if (i == 7 || i == 8) {
                        column.setPreferredWidth(3000);

                    } else if (i == 9 || i == 10) {
                        column.setPreferredWidth(3000);

                    } else if (i == 11 || i == 12) {
                        column.setPreferredWidth(3000);

                    } else if (i == 13 || i == 114) {
                        column.setPreferredWidth(3000);
                    }
                }

            } catch (SQLException ex) {
                Logger.getLogger(Register.class.getName()).log(Level.SEVERE, null, ex);

            }
        }
    }//GEN-LAST:event_jbtnAzurActionPerformed

    private void jbtnGcsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnGcsActionPerformed
        // TODO add your handling code here:
        if ((ALL_USER.equals(jComboBoxUserDetailsFrame.getSelectedItem()))) {
            try {
                ArrayList<String> aa1 = qf.getUploadedDataToGCS();
                String read = new table().getViewUserDeatilsData(aa1);
                jtableviewuserdetails.removeAll();
                jtableviewuserdetails.setModel(new TableCreater().GetTableModel(read));
                jtableviewuserdetails.updateUI();
                TableColumn column = null;
                for (int i = 0; i < jtableviewuserdetails.getColumnCount(); i++) {
                    column = jtableviewuserdetails.getColumnModel().getColumn(i);
                    if (i == 0) {
                        column.setPreferredWidth(3000);
                    } else if (i == 1 || i == 2) {
                        column.setPreferredWidth(3000);
                    } else if (i == 3 || i == 4) {
                        column.setPreferredWidth(3000);
                    } else if (i == 5 || i == 6) {
                        column.setPreferredWidth(3000);
                    } else if (i == 7 || i == 8) {
                        column.setPreferredWidth(3000);

                    } else if (i == 9 || i == 10) {
                        column.setPreferredWidth(3000);

                    } else if (i == 11 || i == 12) {
                        column.setPreferredWidth(3000);

                    } else if (i == 13 || i == 114) {
                        column.setPreferredWidth(3000);
                    }
                }

            } catch (SQLException ex) {
                Logger.getLogger(Register.class.getName()).log(Level.SEVERE, null, ex);

            }
        } else {
            try {
                ArrayList<String> aa1 = qf.getUploadedDataToGCS((String) jComboBoxUserDetailsFrame.getSelectedItem());
                String read = new table().getViewUserDeatilsData(aa1);
                jtableviewuserdetails.removeAll();
                jtableviewuserdetails.setModel(new TableCreater().GetTableModel(read));
                jtableviewuserdetails.updateUI();
                TableColumn column = null;
                for (int i = 0; i < jtableviewuserdetails.getColumnCount(); i++) {
                    column = jtableviewuserdetails.getColumnModel().getColumn(i);
                    if (i == 0) {
                        column.setPreferredWidth(3000);
                    } else if (i == 1 || i == 2) {
                        column.setPreferredWidth(3000);
                    } else if (i == 3 || i == 4) {
                        column.setPreferredWidth(3000);
                    } else if (i == 5 || i == 6) {
                        column.setPreferredWidth(3000);
                    } else if (i == 7 || i == 8) {
                        column.setPreferredWidth(3000);

                    } else if (i == 9 || i == 10) {
                        column.setPreferredWidth(3000);

                    } else if (i == 11 || i == 12) {
                        column.setPreferredWidth(3000);

                    } else if (i == 13 || i == 114) {
                        column.setPreferredWidth(3000);
                    }
                }

            } catch (SQLException ex) {
                Logger.getLogger(Register.class.getName()).log(Level.SEVERE, null, ex);

            }

        }
    }//GEN-LAST:event_jbtnGcsActionPerformed

    private void showUserDetails(ArrayList<String> al) {
        String[] header = {"CloudId", "Email  ", "Password", "address", "cost"};
        UserDetailModel mm = new UserDetailModel(al, header);
        jtableviewuserdetails = new JTable(mm);
        jtableviewuserdetails.setAutoCreateRowSorter(true);
        add(new JScrollPane(jtableviewuserdetails));
        //setSize(200, 200);
        //setVisible(true);
        //setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        jScrollPane1.setViewportView(jtableviewuserdetails);
        //     this.setExtendedState(JFrame.MAXIMIZED_BOTH);

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserDetailsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserDetailsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserDetailsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserDetailsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new UserDetailsFrame().setVisible(true);
            }
        });
    }

    class UserDetailModel extends AbstractTableModel {

        private ArrayList<String> al;
        private String[] header;

        UserDetailModel(ArrayList<String> al, String[] header) {
            this.al = al;
            this.header = header;
        }

        @Override
        public int getColumnCount() {
            return header.length;
        }

        @Override
        public int getRowCount() {
            return al.size();
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            //System.out.println("a1111:"+al.get(rowIndex));
            String[] token = al.get(rowIndex).split("#");
            return token[columnIndex];
        }

        @Override
        public String getColumnName(int col) {
            return header[col];
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> jComboBoxUserDetailsFrame;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jbtnAws;
    private javax.swing.JButton jbtnAzur;
    private javax.swing.JButton jbtnGcs;
    private javax.swing.JButton jbtnlogout;
    private javax.swing.JButton jbtnviewuserdetails;
    private javax.swing.JTable jtableviewuserdetails;
    // End of variables declaration//GEN-END:variables
}
