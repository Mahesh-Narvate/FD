/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import date.BillingPeriod;
import java.util.*;
import Database.DBConnection;
import Database.QueryFunction;
import Database.RegExpCheck;
import static date.BillingPeriod.getCurrentTimeUsingDate;
import date.DateCalc;
import date.DateForworder;
import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author rishi
 */
public class Register extends javax.swing.JFrame {

    DBConnection conObj = new DBConnection();
    QueryFunction qf = new QueryFunction();
    Connection con;
    PreparedStatement ps, ps2, ps3;
    ResultSet rs;
    DateCalc dc = new DateCalc();
    DateForworder df = new DateForworder();
    //  DateCalc dd = new DateCalc();
    java.sql.Date CurrentDate = dc.getCurrentSqlDate();
    public static String size;
    public static String CloudId;

    /**
     * Creates new form Register
     */
    public Register() throws ParseException {
//        this.CurrentDate = dd.getCurrentSqlDate();
        this.setExtendedState(MAXIMIZED_BOTH);
        this.setLocationRelativeTo(null);
        initComponents();

        txtNoofReplication.setEnabled(false);
        BillingPeriod bb = new BillingPeriod();
        //txtNoofReplication.setEnabled(false);

        // to display current time using current date
//        String s = getCurrentTimeUsingDate();
//        String s1=getCurrentTimeUsingDate();
//
//        txtRequiredReplication.setText(s);
//        txtNoofReplication.setText(s1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jlblRegistrationHome = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtFirstName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        TxtEmialId = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtAddr = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtMobile = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        btnClear = new javax.swing.JButton();
        btnSignup = new javax.swing.JButton();
        txtPassword = new javax.swing.JPasswordField();
        txtRePassword = new javax.swing.JPasswordField();
        txtCloudId = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        ExpectedStorage = new javax.swing.JLabel();
        txtReservationTimeSpan = new javax.swing.JComboBox<>();
        txtExpectedStorage = new javax.swing.JComboBox<>();
        txtExpectedGetRequests = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txtExpectedPutRequests = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        txtNoofReplication = new javax.swing.JTextField();
        txtReplicationRequired = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setPreferredSize(new java.awt.Dimension(1300, 898));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel3.setBackground(new java.awt.Color(0, 102, 153));
        jPanel3.setMinimumSize(new java.awt.Dimension(1300, 52));
        jPanel3.setPreferredSize(new java.awt.Dimension(1300, 52));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(254, 254, 254));
        jLabel1.setText("               Registration");
        jLabel1.setMaximumSize(new java.awt.Dimension(358, 52));
        jLabel1.setMinimumSize(new java.awt.Dimension(358, 52));
        jLabel1.setPreferredSize(new java.awt.Dimension(358, 52));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 233;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 73, 0, 413);
        jPanel3.add(jLabel1, gridBagConstraints);

        jlblRegistrationHome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/rsz_home-icon.png"))); // NOI18N
        jlblRegistrationHome.setText("jLabel11");
        jlblRegistrationHome.setMaximumSize(new java.awt.Dimension(40, 40));
        jlblRegistrationHome.setMinimumSize(new java.awt.Dimension(40, 40));
        jlblRegistrationHome.setPreferredSize(new java.awt.Dimension(40, 40));
        jlblRegistrationHome.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jlblRegistrationHomeMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 183, 0, 0);
        jPanel3.add(jlblRegistrationHome, gridBagConstraints);

        jPanel1.add(jPanel3, java.awt.BorderLayout.PAGE_START);

        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jPanel2.setBackground(new java.awt.Color(0, 102, 153));
        jPanel2.setForeground(new java.awt.Color(237, 134, 110));
        jPanel2.setMinimumSize(new java.awt.Dimension(1300, 846));
        jPanel2.setPreferredSize(new java.awt.Dimension(1300, 846));

        jLabel2.setBackground(new java.awt.Color(2, 104, 106));
        jLabel2.setFont(new java.awt.Font("Sylfaen", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(254, 254, 254));
        jLabel2.setText("Name");

        txtFirstName.setMinimumSize(new java.awt.Dimension(559, 30));
        txtFirstName.setPreferredSize(new java.awt.Dimension(559, 30));
        txtFirstName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFirstNameActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Sylfaen", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(254, 254, 254));
        jLabel3.setText("EmailId/UserName");

        TxtEmialId.setMinimumSize(new java.awt.Dimension(559, 30));
        TxtEmialId.setPreferredSize(new java.awt.Dimension(559, 30));

        jLabel4.setFont(new java.awt.Font("Sylfaen", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(254, 254, 254));
        jLabel4.setText("Address");

        txtAddr.setMinimumSize(new java.awt.Dimension(559, 30));
        txtAddr.setPreferredSize(new java.awt.Dimension(559, 30));

        jLabel5.setFont(new java.awt.Font("Sylfaen", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(254, 254, 254));
        jLabel5.setText("Mobile no");

        txtMobile.setMinimumSize(new java.awt.Dimension(559, 30));
        txtMobile.setPreferredSize(new java.awt.Dimension(559, 30));
        txtMobile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMobileActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Sylfaen", 0, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(254, 254, 254));
        jLabel7.setText("Password ");

        jLabel8.setFont(new java.awt.Font("Sylfaen", 0, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(254, 254, 254));
        jLabel8.setText("Password Confirmation");

        jLabel9.setFont(new java.awt.Font("Sylfaen", 0, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(254, 254, 254));
        jLabel9.setText("Cloud ID");

        btnClear.setBackground(new java.awt.Color(210, 219, 224));
        btnClear.setFont(new java.awt.Font("Sylfaen", 1, 18)); // NOI18N
        btnClear.setForeground(new java.awt.Color(2, 104, 106));
        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnSignup.setBackground(new java.awt.Color(210, 219, 224));
        btnSignup.setFont(new java.awt.Font("Sylfaen", 1, 18)); // NOI18N
        btnSignup.setForeground(new java.awt.Color(2, 104, 106));
        btnSignup.setText("Submit");
        btnSignup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSignupActionPerformed(evt);
            }
        });

        txtPassword.setPreferredSize(new java.awt.Dimension(559, 30));

        txtRePassword.setPreferredSize(new java.awt.Dimension(559, 30));
        txtRePassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRePasswordActionPerformed(evt);
            }
        });

        txtCloudId.setMinimumSize(new java.awt.Dimension(559, 30));
        txtCloudId.setPreferredSize(new java.awt.Dimension(559, 30));
        txtCloudId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCloudIdActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Sylfaen", 0, 14)); // NOI18N
        jButton1.setText("Generate cloud Id");
        jButton1.setPreferredSize(new java.awt.Dimension(89, 33));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Sylfaen", 0, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("ReplicationRequired");

        jLabel10.setFont(new java.awt.Font("Sylfaen", 0, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("NoofReplication");

        ExpectedStorage.setFont(new java.awt.Font("Sylfaen", 0, 14)); // NOI18N
        ExpectedStorage.setForeground(new java.awt.Color(255, 255, 255));
        ExpectedStorage.setText("ExpectedStorage");

        txtReservationTimeSpan.setFont(new java.awt.Font("Sylfaen", 0, 14)); // NOI18N
        txtReservationTimeSpan.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "15days", "1Month", "2Month", "3Month", "6Month", "1Year", "2Year" }));
        txtReservationTimeSpan.setPreferredSize(new java.awt.Dimension(89, 33));
        txtReservationTimeSpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtReservationTimeSpanActionPerformed(evt);
            }
        });

        txtExpectedStorage.setFont(new java.awt.Font("Sylfaen", 0, 14)); // NOI18N
        txtExpectedStorage.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1MB", "5MB", "10MB", "100MB", "1GB", "2GB", "5GB", "10GB", "50GB", "1TB" }));
        txtExpectedStorage.setPreferredSize(new java.awt.Dimension(89, 33));

        txtExpectedGetRequests.setMinimumSize(new java.awt.Dimension(559, 30));
        txtExpectedGetRequests.setPreferredSize(new java.awt.Dimension(559, 30));
        txtExpectedGetRequests.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtExpectedGetRequestsActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Sylfaen", 0, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("ExpectedGetRequest");

        jLabel13.setFont(new java.awt.Font("Sylfaen", 0, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("ExpectedPutRequest");

        txtExpectedPutRequests.setPreferredSize(new java.awt.Dimension(559, 30));

        jLabel14.setFont(new java.awt.Font("Sylfaen", 0, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("Reservation Time Span");

        txtNoofReplication.setPreferredSize(new java.awt.Dimension(559, 30));
        txtNoofReplication.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNoofReplicationActionPerformed(evt);
            }
        });

        if("No".equals((String)txtReplicationRequired.getSelectedItem())){
            txtNoofReplication.setEnabled(false);
        }
        txtReplicationRequired.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "No", "Yes" }));
        if("Yes".equals((String)txtReplicationRequired.getSelectedItem())){
            txtNoofReplication.setEnabled(false);
        }
        txtReplicationRequired.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                txtReplicationRequiredItemStateChanged(evt);
            }
        });
        txtReplicationRequired.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtReplicationRequiredActionPerformed(evt);
            }
        });
        if("Yes".equals((String)txtReplicationRequired.getSelectedItem())){
            txtNoofReplication.setEnabled(true);
        }

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(385, 385, 385)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 563, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(TxtEmialId, javax.swing.GroupLayout.PREFERRED_SIZE, 563, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(txtAddr, javax.swing.GroupLayout.PREFERRED_SIZE, 563, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(txtMobile, javax.swing.GroupLayout.PREFERRED_SIZE, 563, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 563, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(txtRePassword, javax.swing.GroupLayout.PREFERRED_SIZE, 563, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(ExpectedStorage)
                        .addGap(174, 174, 174)
                        .addComponent(jLabel14))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(txtExpectedStorage, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22)
                        .addComponent(txtReservationTimeSpan, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel12)
                    .addComponent(txtExpectedGetRequests, javax.swing.GroupLayout.PREFERRED_SIZE, 563, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(txtExpectedPutRequests, javax.swing.GroupLayout.PREFERRED_SIZE, 563, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(156, 156, 156)
                        .addComponent(jLabel10))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(txtReplicationRequired, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addComponent(txtNoofReplication, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel9)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(txtCloudId, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btnSignup, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(jLabel3)
                .addGap(6, 6, 6)
                .addComponent(TxtEmialId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(jLabel4)
                .addGap(6, 6, 6)
                .addComponent(txtAddr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(jLabel5)
                .addGap(6, 6, 6)
                .addComponent(txtMobile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(jLabel7)
                .addGap(6, 6, 6)
                .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(jLabel8)
                .addGap(6, 6, 6)
                .addComponent(txtRePassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ExpectedStorage)
                    .addComponent(jLabel14))
                .addGap(6, 6, 6)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtExpectedStorage, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtReservationTimeSpan, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addComponent(jLabel12)
                .addGap(6, 6, 6)
                .addComponent(txtExpectedGetRequests, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(jLabel13)
                .addGap(6, 6, 6)
                .addComponent(txtExpectedPutRequests, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel10))
                .addGap(11, 11, 11)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtReplicationRequired, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNoofReplication, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(1, 1, 1)
                .addComponent(jLabel9)
                .addGap(6, 6, 6)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(txtCloudId, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSignup, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        if("Yes".equals((String)txtReplicationRequired.getSelectedItem())){
            txtNoofReplication.setEnabled(true);
        }

        jScrollPane1.setViewportView(jPanel2);

        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1300, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 963, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 963, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        txtFirstName.setText("");
        TxtEmialId.setText("");
        txtAddr.setText("");
        txtPassword.setText("");
        txtRePassword.setText("");
        txtMobile.setText("");
        txtCloudId.setText("");
//        buttonGroup1.clearSelection();
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnSignupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSignupActionPerformed

        try {
            con = conObj.dbConnection();//getting db connection
            String Role = null;
            int f = 0;
            if (txtFirstName.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Enter First Name", "Error", JOptionPane.ERROR_MESSAGE);
            } else if (TxtEmialId.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Enter Last Name", "Error", JOptionPane.ERROR_MESSAGE);
            } else if (txtAddr.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Enter Email Id", "Error", JOptionPane.ERROR_MESSAGE);
            } else if (txtMobile.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Enter Phone No", "Error", JOptionPane.ERROR_MESSAGE);
            } else if (txtMobile.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Enter Address", "Error", JOptionPane.ERROR_MESSAGE);
            } else if (txtPassword.getPassword().length == 0) {
                JOptionPane.showMessageDialog(this, "Enter Password", "Error", JOptionPane.ERROR_MESSAGE);
            } else if (txtRePassword.getPassword().length == 0) {
                JOptionPane.showMessageDialog(this, "Re-enter Password", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                try {
                    //creating object of regular expn 
                    RegExpCheck regexpn = new RegExpCheck();
                    //matching entered data with regular expn
                    if (!regexpn.matchText(txtFirstName.getText())) {
                        JOptionPane.showMessageDialog(this, "Please enter only Alphabets.");
                        txtFirstName.requestFocus();
                    } else if (regexpn.matchText(TxtEmialId.getText())) {
                        JOptionPane.showMessageDialog(this, "Please enter only characters");
                        TxtEmialId.requestFocus();
                    } else if (!regexpn.matchMobileNo(txtMobile.getText())) {
                        JOptionPane.showMessageDialog(this, "Please Enter 10 digit mobile no.");
                        txtMobile.requestFocus();
                    } else if (!regexpn.matchPassword(new String(txtPassword.getPassword()))) {
                        JOptionPane.showMessageDialog(this, "Please enter character min-6 character to max-20 character");
                        txtPassword.requestFocus();
                    } else if (!regexpn.matchPassword(new String(txtRePassword.getPassword()))) {
                        JOptionPane.showMessageDialog(this, "Please enter character min-6 character to max-20 character");
                        txtRePassword.requestFocus();
                    } else {
                        String pass = new String(txtPassword.getPassword());
                        String cpass = new String(txtRePassword.getPassword());

                        //checking for password mismatches
                        if ((!pass.equals(cpass))) {
                            JOptionPane.showMessageDialog(this, "Password Mismatches", "Error", JOptionPane.ERROR_MESSAGE);
                        } else {
                            String Name = txtFirstName.getText().trim();
                            String Email = TxtEmialId.getText().trim();
                            String Addr = txtAddr.getText().trim();
                            String phoneNo = txtMobile.getText().trim();
                            String Password = new String(txtPassword.getPassword());
                            String RePassword = new String(txtRePassword.getPassword());
                            String ExpectedStorage = (String) txtExpectedStorage.getSelectedItem();
                            String ExpectedGetRequest = txtExpectedGetRequests.getText();
                            String ExpectedPutRequest = txtExpectedPutRequests.getText();
                            String ReplicationRequired = (String) txtReplicationRequired.getSelectedItem();
                            String NoofReplication = txtNoofReplication.getText();
                            String ReservationTimeSpan = (String) txtReservationTimeSpan.getSelectedItem();
                            String Dura = (String) txtReservationTimeSpan.getSelectedItem();
                            //String NoOfDays = (String) txtReservationTimeSpan.getSelectedItem();
                            String NoOfDays = "";

                            int Duration = 0;

                            if (Dura.contains("days")) {
                                NoOfDays = Dura.replace("days", "");
                                Duration = Integer.parseInt(NoOfDays);

                            } else if (Dura.contains("Month")) {
                                NoOfDays = Dura.replace("Month", "");
                                Duration = Integer.parseInt(NoOfDays);
                            } else if (Dura.contains("Year")) {
                                NoOfDays = Dura.replace("Year", "");
                                Duration = Integer.parseInt(NoOfDays);
                            }

                            java.sql.Date StartDate = CurrentDate;

                            java.sql.Date EnDate = null;
                            if (Dura.contains("days")) {
                                EnDate = dc.getConvertedSqlDate(df.forwordByDay(new Date(System.currentTimeMillis()), Duration));
                            } else if (Dura.contains("Month")) {
                                EnDate = dc.getConvertedSqlDate(df.forwordByDay(new Date(System.currentTimeMillis()), Duration));
                            } else if (Dura.contains("Year")) {
                                EnDate = dc.getConvertedSqlDate(df.forwordByDay(new Date(System.currentTimeMillis()), Duration));
                            }

                            String cloudId = txtCloudId.getText().trim();

                            //checking register user is present or not, if ant else part will execute
                            System.out.println("");
                            if (qf.checkRegUser(Name, Email, Addr, phoneNo, Password, cloudId)) {

                                JOptionPane.showMessageDialog(this, "User Emailid already present", "Error", JOptionPane.ERROR_MESSAGE);
                            } else {
                                try {
                                    String Dominant = "";
                                    double Discount = 0.0;
                                    // finding dominant
                                    if ((Long.parseLong(ExpectedGetRequest) >= Long.parseLong(ExpectedPutRequest))) {
                                        Dominant = "GetDominant";

                                        System.out.println("discount=" + Discount);

                                    }
                                    if (Long.parseLong(ExpectedGetRequest) < Long.parseLong(ExpectedPutRequest)) {
                                        Dominant = "PutDominant";

                                    }

                                    // adding discount
                                    if (Duration >= 1) {
                                        Discount = 50.0;
                                    } else {
                                        Discount = 30.0;
                                        System.out.println("discount=" + Discount);
                                    }

                                    boolean insert = qf.insertRegistration(Name, Email, Addr, phoneNo, Password, ExpectedStorage, ExpectedGetRequest, ExpectedPutRequest, ReplicationRequired, NoofReplication, cloudId, ReservationTimeSpan, Dominant, CurrentDate, EnDate);
                                    boolean i = qf.insertDiscount(Email, Discount);
                                    if (insert && i) {
                                        System.out.println("User Registered  sucessfully.....!");
                                        JOptionPane.showMessageDialog(null, "User Registered  sucessfully....!");
                                        this.dispose();
                                        MainFrame mF = new MainFrame();
                                        mF.setVisible(true);
                                    }
                                } catch (HeadlessException | NumberFormatException | SQLException e) {
                                    e.printStackTrace();
                                }

                            }
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(null, "Data is not inserted poperly...");
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

//        this.dispose();
//        new MainFrame().setVisible(true);

    }//GEN-LAST:event_btnSignupActionPerformed

    private void txtFirstNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFirstNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFirstNameActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        Random ran = new Random();
        CloudId = 100000 + ran.nextInt(900000) + "";

        txtCloudId.setText(CloudId);

    }//GEN-LAST:event_jButton1ActionPerformed

    private void txtCloudIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCloudIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCloudIdActionPerformed

    private void txtRePasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRePasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtRePasswordActionPerformed

    private void txtMobileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMobileActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMobileActionPerformed

    private void txtReservationTimeSpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtReservationTimeSpanActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtReservationTimeSpanActionPerformed

    private void txtExpectedGetRequestsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtExpectedGetRequestsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtExpectedGetRequestsActionPerformed

    private void txtNoofReplicationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNoofReplicationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNoofReplicationActionPerformed

    private void txtReplicationRequiredItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_txtReplicationRequiredItemStateChanged
        // TODO add your handling code here:


    }//GEN-LAST:event_txtReplicationRequiredItemStateChanged

    private void txtReplicationRequiredActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtReplicationRequiredActionPerformed
        // TODO add your handling code here:

        if ("Yes".equals((String) txtReplicationRequired.getSelectedItem())) {
            txtNoofReplication.setEnabled(true);
        } else {
            txtNoofReplication.setEnabled(false);
        }

    }//GEN-LAST:event_txtReplicationRequiredActionPerformed

    private void jlblRegistrationHomeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jlblRegistrationHomeMouseClicked
        // TODO add your handling code here:

        this.dispose();
        new MainFrame().setVisible(true);

    }//GEN-LAST:event_jlblRegistrationHomeMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Register.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Register.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Register.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Register.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    ///  new Register().setLocationRelativeTo(null);
                    new Register().setVisible(true);
                } catch (ParseException ex) {
                    Logger.getLogger(Register.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ExpectedStorage;
    private javax.swing.JTextField TxtEmialId;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnSignup;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel jlblRegistrationHome;
    private javax.swing.JTextField txtAddr;
    private javax.swing.JTextField txtCloudId;
    private javax.swing.JTextField txtExpectedGetRequests;
    private javax.swing.JTextField txtExpectedPutRequests;
    private javax.swing.JComboBox<String> txtExpectedStorage;
    private javax.swing.JTextField txtFirstName;
    private javax.swing.JTextField txtMobile;
    private javax.swing.JTextField txtNoofReplication;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JPasswordField txtRePassword;
    private javax.swing.JComboBox<String> txtReplicationRequired;
    private javax.swing.JComboBox<String> txtReservationTimeSpan;
    // End of variables declaration//GEN-END:variables
}
